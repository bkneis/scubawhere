<?php
/**
 * This controller is responsible for sending out passwort reminder emails and resetting a password.
 *
 * @author Generated by Laravel
 * @edit Soren Schwert <soren@scubawhere.com>
 */
class PasswordController extends Controller {

	/**
	 * Sent a password reminder email.
	 *
	 * POST /password/remind
	 *
	 * @param string $email The email address to reset the password for
	 * @return JSON
	 */
	public function postRemind()
	{
		$response = Password::remind(Input::only('email'), function($message)
		{
			if( Input::has('welcome'))
				$message->subject('Welcome to ScubawhereRMS');
			else
				$message->subject('Scubawhere Password Reminder');
		});

		switch( $response )
		{
			case Password::INVALID_USER:
				if(Request::ajax())
					return Response::json( array('errors' => array(Lang::get($response))), 406 ); // 406 Not Acceptable

				return View::make('password.remind')->with('error', Lang::get($response));

			case Password::REMINDER_SENT:
				if(Request::ajax())
					return Response::json( array('status' => Lang::get($response)), 201 ); // 201 Created

				return View::make('password.remind')->with('status', Lang::get($response));

			default:
				if(Request::ajax())
					return Response::json( array('errors' => array('Nothing happend I\'m afraid...')), 500); // 500 Internal Server Error

				Session::set('error', 'Nothing happend I\'m afraid...');
				return View::make('password.remind');
		}
	}

	/**
	 * Reset a user's password and logs the user in when successfull.
	 *
	 * POST /password/reset
	 *
	 * @param string $email            The email address the password should be reset for
	 * @param string $password         The new password
	 * @param string $password_confirm Confirmation of the new password
	 * @param string $token            The security token that was sent in the email
	 * @return JSON
	 */
	public function postReset()
	{
		$credentials = Input::only(
			'email', 'password', 'password_confirmation', 'token'
		);

		$response = Password::reset($credentials, function($company, $password) use ($credentials)
		{
			$company->password = Hash::make($password);
			$company->updateUniques();
		});

		if( is_object($response) )
			return $response;

		switch ($response)
		{
			case Password::INVALID_PASSWORD:
			case Password::INVALID_TOKEN:
			case Password::INVALID_USER:
				return View::make('password.reset', array('error' => Lang::get($response), 'email' => $credentials['email'], 'token' => $credentials['token']));

			case Password::PASSWORD_RESET:
				return View::make('password.reset', array('email' => $credentials['email'], 'status' => 'A new password has been set.<br><br><a href="../dashboard/login/">Log in</a>'));
		}
	}

	/**
	 * Display the password reminder view.
	 *
	 * @return Response
	 */
	public function getRemind()
	{
		return View::make('password.remind');
	}

	/**
	 * Display the password reset view for the given token.
	 *
	 * @param  string  $token
	 * @return Response
	 */
	public function getReset()
	{
		$email = Input::get('email');
		$token = Input::get('token');

		$validator = Validator::make(
			array(
				'email' => $email,
				'token' => $token
			),
			array(
				'email' => 'required|email',
				'token' => 'required|alpha_num'
			)
		);

		if ($validator->fails()) App::abort(404, $validator->messages()->first());

		return View::make('password.reset', array('email' => $email, 'token' => $token));
	}
}
